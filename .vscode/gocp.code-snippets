{
	// Place your go-noob-to-hero workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Go boilerplate for gocp": {
		"prefix": "gocp",
		"body": [
			"package main",
			"",
			"func ${1:HandlerName}() {",
			"}",
			"func main() {",
			"\t${1:HandlerName}()",
			"}"
		],
		"description": "Generates a Go CP boilerplates"
	},
	"Go boilerplate for array gocp": {
		"prefix": "gocparray",
		"body": [
			"package main",
			"",
			"func ${1:HandlerName}(arr []int) {",
			"}",
			"",
			"func main() {",
			"\tarr := []int{3,4,9,3,7,3,5}",
			"\t${1:HandlerName}(arr)",
			"}"
		],
		"description": "Generates a Go CP boilerplates"
	},
	"Go boilerplate for 2d array gocp": {
		"prefix": "gocparray2d",
		"body": [
			"package main",
			"",
			"func ${1:HandlerName}(arr [][]int) {",
			"}",
			"",
			"func main() {",
			"\tarr := [][]int{{3,4,9},{3,7,3},{5,6,2}}",
			"\t${1:HandlerName}(arr)",
			"}"
		],
		"description": "Generates a Go CP boilerplates"
	}
}